/*
 * SystemThresholdFrame.h - Class holding thresholds for carma monitor system.
 */

#ifndef CARMA_SYSTEM_THRESHOLD_FRAME_H
#define CARMA_SYSTEM_THRESHOLD_FRAME_H

/*!
 * @file SystemThresholdFrame.h
 * This is the class declaration file for a threshold frame that holds
 * all the threshold values for a monitor system.
 *
 * @author N. S. Amarnath
 *
 * File containing declarations for SystemThresholdFrame class.
 *
 */

#include "carma/util/ErrorException.h"
#include "carma/monitor/types.h"

namespace carma {
namespace monitor {


class MonitorSystem;
class MonitorPoint;
class MonitorPointThreshold;
struct ThresholdStruct;


/**
 * @class ThresholdObjectNotFoundException
 * @brief Exception generated by SystemThreshdolFrame object when 
 *        threshold object (specified by tagID) is not found in the
 *        SystemthresholdFrame.
 */
class ThresholdObjectNotFoundException : public ::carma::util::ErrorException  
{
  public:

    ThresholdObjectNotFoundException ( tagIDType    tagID, 
                                       const char * fileName, 
                                       int          lineNo );

    ~ThresholdObjectNotFoundException () throw () { }

  private:

    /**
     * Method to generate message string for exception. Message
     * string is passed on to ErrorException object. This method
     * just takes the parameter to be reported and creates a 
     * sensible error message around it.
     *
     * @param tagID Tag ID of monitor point associated with the
     *        threshold that wasnt found.
     * @return std::string error message.
     */
    static std::string makeMessage( tagIDType tagID );
};


/**
 * @class ReachedNumThresholdLimitException
 * @brief Exception generated by SystemThreshdolFrame object when threshold
 *        object (specified by tagID) cannot be allocated due to lack of
 *        space (number of allocated thresholds == maxThresholds).
 */
class ReachedNumThresholdLimitException : public ::carma::util::ErrorException  
{
  public:

    ReachedNumThresholdLimitException( long         maxThresholds,
                                       tagIDType    tagID,
                                       const char * fileName, 
                                       int          lineNo);

    ~ReachedNumThresholdLimitException () throw () { }

  private:

    /**
     * Method to generate message string for exception. Message
     * string is passed on to ErrorException object. This method
     * just takes the parameter to be reported and creates a 
     * sensible error message around it.
     *
     * @param maxThresholds long maximum number of thresholds that may be 
     *        allocated in the threshold frame reporting the error.
     * @param tagID Tag ID of monitor point associated with the
     *        threshold that couldnt be allocated.
     * @return std::string error message.
     */
    static std::string makeMessage( long      maxThresholds,
                                    tagIDType tagID );
};


/**
 * Structure keeps track of sample properties of a monitor point
 * for the purposes of calculating various averages.
 * Used by monitorPointSpecializations.h, MonitorPointNumeric.h 
 * and MonitorPointAccumulatorT.h
 */
struct ThresholdFrameStruct {
   /**
    * Maximum number of thresholds that can be accomodated.
    *
    */
    long maxNumThresholds; // # of thresholds that the frame can hold

   /**
    * Actual number of thresholds that the frame is holding.
    *
    */
    long numThresholds; // # of thresholds allocated within this frame

   /**
    * Pointer to index of thresholds - index is arranged in ascending
    * order of tagID's.
    *
    */
    int * thresholdIndex; // points to array of indices to thresholds

   /**
    * Array of threshold objects - array size is equal to 
    * maxNumThresholds.
    *
    */
    ThresholdStruct * thresholds;
};


/**
 * Class that manages the thresholds for all the monitor points within
 * a monitor system (represented by a ::carma::monitor::MonitorSystem object).
 *
 * @see MonitorSystem
 * @see MonitorPoint
 */
class SystemThresholdFrame {

  public:

    /**
     * Constructor - creates a struct using the MonitorSystem, initializes
     * struct with the maxThresholds, sizes it correctly, so the pointers
     * point to meaningful spaces.
     */
    explicit SystemThresholdFrame( MonitorSystem & monitorSystem );

    /**
     * Destructor - deletes frame structure.
     *
     * @see SystemThresholdFrame::SystemThresholdFrame
     */
    virtual ~SystemThresholdFrame() ;

    /**
     * Returns number of allocated thresholds.
     *
     * @return long number of allocated thresholds - always >= 0.
     */
    long getNumThresholds() const;

    /**
     * Returns maximum number of allocatable thresholds.
     *
     * @return long maximum number of allocatable thresholds - always >= 0.
     */
    long getMaxNumThresholds() const;

    /**
     * Sets threshold related validity flags for all monitor points
     * in the MonitorSystem.
     * @return none
     */
    virtual void calibrateMonitorSystem( );

    /**
     * Returns the MonitorPointThreshold object associated with the monitor 
     * point mp such that mp.getTagID() == tagID. Returned reference points
     * to an allocated object. Caller must delete object.
     *
     * @param tagID Tag ID associated with the associated monitor point.
     * @return MonitorPointThreshold& associated threshold object.
     */
    MonitorPointThreshold & getThreshold( tagIDType tagID ) const;

  protected:

    /**
     * Returns reference to internal ThresholdFrameStruct. Useful when
     * constructing some derived classes.
     *
     * @return ThresholdFrameStruct reference to internal frame structure.
     */
    ThresholdFrameStruct & getThresholdFrame( ) const;

    /**
     * Returns reference to internal ThresholdStruct. Useful when
     * constructing a MonitorPointThreshold object.
     *
     * @param index Index of threshold in threshold array contained
     *        in the ThresholdFrameStruct.
     * @return ThresholdStruct reference to internal threshold structure.
     * @see MonitorPointThreshold
     * @see ThresholdFrameStruct
     * @see ThresholdStruct
     */
    ThresholdStruct & getThresholdStruct( int index ) const;

    /**
     * Searches for index to threshold with tagID.
     * Returns index in threshold array.
     *
     * @param tagID Tag ID of threshold to find.
     * @return int index in threshold array, of threshold we want.
     */
    int findThreshold( tagIDType tagID ) const;

    /**
     * Computes size of threshold frame required to hold 
     * <pre>maxThresholds</pre> number of thresholds.
     *
     * @param maxThresholds long maximum number of thresholds the
     *        ThresholdFrameStruct is expected to hold.
     * @return size_t size of ThresholdFrameStruct required to hold
     *        <pre>maxThresholds</pre> thresholds.
     */
    static size_t sizeThresholdFrame (long maxThresholds);

    /**
     * Initializes size related portions of ThresholdFrameStruct. Sets
     * maximum # of thresholds that can be accomodated in the structure,
     * and sets the pointers to point to the correct locations based on
     * the maximum # of thresholds.
     *
     * @param frame ThresholdFrameStruct& to be initialized.
     * @param maxThresholds maximum # of thresholds the structure can accomodate.
     * @return ThresholdFrameStruct& reference to initialized structure.
     */
    static ThresholdFrameStruct &
    setThresholdFrameSize( ThresholdFrameStruct & frame,
                           long                   maxThresholds );

    /**
     * Initializes the pointers within the ThresholdFrameStruct to
     * point to meaningful spaces based on the maxNumThresholds member
     * of the structure. Assumes that frame.maxNumThresholds has been 
     * set correctly.
     *
     * @param frame ThresholdFrameStruct& to be initialized.
     * @return ThresholdFrameStruct& reference to initialized structure.
     */
    static ThresholdFrameStruct &
    fixupFramePointers( ThresholdFrameStruct & frame );

  private:

    /**
     * Makes ThresholdFramestruct given a MonitorSystem as input.
     * Returns initialized ThresholdFrameStruct.
     *
     * @param monitorSystem MonitorSystem& thresholds are bound to 
     *        this monitor system.
     * @return ThresholdFrameStruct initialized structure.
     */
    static ThresholdFrameStruct &
    createThresholdFrameStruct( MonitorSystem & monitorSystem );

    static void
    destroyThresholdFrameStruct( ThresholdFrameStruct & thresholdFrameStruct );

    /**
     * Initializes threshold values using default thresholds in
     * monitor points in the MonitorSystem (<pre>ms</pre>). 
     *
     * @param ms MonitorSystem associated with the threshold frame object 
     * @return none
     */
    void initializeThresholdValues( );

    struct MpThreshPair {
        MonitorPoint *    mp;
        ThresholdStruct * thresholdStruct;
    };

    /**
     * Structure that holds all the thresholds for an entire monitor system.
     * There's one threshold object per monitor point in the associated
     * monitor system.
     */
    ThresholdFrameStruct &        thresholdFrame_;
    MonitorSystem &               monitorSystem_;
    ::std::vector< MpThreshPair > mpThreshPairs_;
}; // class SystemThresholdFrame


}  // namespace carma::monitor
}  // namespace carma

#endif
