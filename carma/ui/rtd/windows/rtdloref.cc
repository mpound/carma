/*
 * @file
 *
 * RTD definition for LO reference window
 *
 * @author Chul Gwon (from Steve Scott)
 * $Id: rtdloref.cc,v 1.13 2013/11/19 03:41:14 iws Exp $
 *
 * $CarmaCopyright$
 */

#include <sstream>
#include <vector>

#include "carma/ui/rtd/common/MonitorDisplay.h"
#include "carma/ui/rtd/common/MonitorSingleTableFolder.h"
using namespace carma::ui::rtd;

#include "carma/monitor/LoRefSubsystem.h"
using namespace carma::monitor;

#include "carma/util/Program.h"

static std::string makeHelp()
{
	std::ostringstream oss;
	oss << "LORef Help\n"
		<< "\n"
		<< "Status of the local oscillator reference subsystem.\n"
		<< "\n"
		<< "The LO Reference subsystem is used to set and monitor the frequencies "
		<< "of the reference signals used by the antennas' local oscillators. The "
		<< "reference signals are generated by frequency synthesizers which the LO "
		<< "Reference software subsystem controls via GPIB. CARMA initially will "
		<< "have a total of three frequency synthesizers generating LO reference "
		<< "tones.\n\n"
		<< "Row Definitions\n"
		<< " SynthFreqCmd: Frequency sent on last command to the synthesizer\n"
		<< " SynthFreqRpt: Frequency as reported by the synthesizer over the HPIB\n"
		<< " SynthAmpRpt: Amplitude as reported by the synthesizer over the HPIB\n"
		<< " SynthStatus: Status as reported by the synthesizer over the HPIB\n"
		<< " SynthFreqErr(Distribution Box tab): The difference between the "
		<< "counted frequncy (not displayed anywhere) and the commanded "
		<< "frequency (SynthFreqCmd).";
	return oss.str();
}

int carma::util::Program::main()
{
	const std::string title = "Local Oscillator Reference Subsystem";
	const std::string helpTitle = "LORef";

	// Create a dislay
	MonitorDisplay display(title);
	display.setSpecificHelp(helpTitle, makeHelp());

	const int width = 60;
	std::vector<std::string> columnLabel;
	std::vector<MonitorContainer*> container1;
	std::vector<MonitorContainer*> container2;

	for (int i = 0; i < 3; i++) {
		std::ostringstream oss;
		oss << "LoRef#" << i+1;
		columnLabel.push_back(oss.str());
		container1.push_back(&display.cms().loRef().loRefSynthesizer(i));
		container2.push_back(&display.cms().loRef().loRefDistributionBox(i));
	}

	// Create folders with tables
	MonitorSingleTableFolderPtr folder1(new MonitorSingleTableFolder("Synthesizer", columnLabel, container1, width));
	MonitorSingleTableFolderPtr folder2(new MonitorSingleTableFolder("DistributionBox", columnLabel, container2, width));

	// Add the folders to the display
	display.add(folder1);
	display.add(folder2);

	// Loop forever serving data to the client
	while (display.serveData()) {
	}

	return EXIT_SUCCESS;
}
