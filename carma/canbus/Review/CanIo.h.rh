/** @file
 * $Id: CanIo.h.rh,v 1.1 2003/07/16 20:02:24 rick Exp $
 * 
 * Provides Input Output access to Janz CAN cards. 
 * 
 * Author: Andy Beard
 * Version: $Revision: 1.1 $
 * $Date: 2003/07/16 20:02:24 $
 */

/*** REVIEW
 * Reviewer: rh
 * Comments: clean
 */

#ifndef CARMA_CANBUS_CANIO_H
#define CARMA_CANBUS_CANIO_H

// System includes
#include <pthread.h>
#include <queue>
#include <string>

// Janz includes 
#include "janz/dpm.h"

// Carma includes 
#include "carma/canbus/CanOutput.h"
#include "carma/canbus/Error.h"
#include "carma/canbus/Message.h"
#include "carma/util/IPQreader.h"
#include "carma/util/IPQwriter.h"
#include "carma/util/Time.h"

namespace carma {
namespace canbus {

    /**
     *   CanIo class.
     *   CanIo performs all input and output with Janz CAN cards.
     *   
     *   The CanIo class is meant for use with Janz VMOD-ICAN single port
     *   can modules.  However, it can be used as well with CAN-PCI2 
     *   (Single device - dual port) cards although only Port 0 on the card 
     *   will be accessible.  
     *   
     *   CanIo can be used in several ways.  
     *   
     *   CanIo can be used to control a single or multiple VMOD-ICAN 
     *   devices with a single CanIo object.  This is reflected in the 
     *   below single and double device constructors.  In these cases, 
     *   all CAN Messages are read from their respective devices, assigned
     *   a BusId (see below) and placed into a shared message queue for
     *   retrieval using the CanIo::getMessage routine.  
     *   
     *   CanIo may also be used with the below described default constructor 
     *   for emulation.  In this case, CanIo will open /dev/null instead 
     *   of a specified CAN device.  All writes will be posted to /dev/null 
     *   and reads will in general block forever.  The single caveat to this 
     *   is that a simulated Message object may be placed into the shared 
     *   message queue using the CanIo::queueMessage method.  In this case, 
     *   reads (i.e. getMessage) will return with the simulated message 
     *   as if it had come directly from the CANbus. 
     *
     *   BusId.  It is important that any user of carma::canbus classes
     *   understand the concept of a BusId.  The BusId is a unique Id 
     *   assigned to each CANbus being controlled by CanIo classes.  The
     *   uniqueness of the Id is assured not only within a process but also
     *   within the context of any process on the linux host machine.  This
     *   is accomplished by deriving the busId from the device filename.
     *   The most important thing to remember regarding BusIds is that any
     *   program logic that uses CanIo to postMessages to a CANbus must set
     *   the busId correctly on the carma::canbus::Message object being 
     *   posted.  This is most easily done by setting the busId of a message
     *   to be posted to the same busId of a message already received from 
     *   the device or node one wishes to talk to 
     *   (e.g. txMsg.setBusId(rxMsg.getBusId)).  If this isn't possible 
     *   then the carma::canbus::extractBusId routine can be used to 
     *   determine the busId from the filename or, the constant busId
     *   carma::canbus::ALL_BUSSES can be used to send the message to all 
     *   busses.  See carma::canbus::Message for more information.
     */
    class CanIo : public CanOutput {
        public:

            // Constructors...

            /**
             * Default constructor - for emulation only.
             * This constructor is intended for use when no Janz 
             * hardware exists and the user wishes to emulate CanIo.  This
             * is accomplished by opening /dev/null.  Reads will block 
             * until a CanIo derivative queues messages explicitly whereas
             * writes will write to /dev/null.
             * @see queueMessage 
             */
            CanIo ();

            /** 
             *  Constructor for CanIo object with single device.  
             *  This constructor initializes a CanIo object for use with 
             *  a single VMOD-ICAN device.
             *  @param deviceName: The name of the CAN device 
             *  (e.g. /dev/dpm_00).
             *  @param terminate Flag to control setting of onboard 
             *  bus termination resistor.  Set true if card is connected 
             *  to the beginning or end of a CANbus (the last or first node). 
             */ 		
            CanIo (char* deviceName, bool terminate);

            /**
             *  Constructor for CanIo object with dual devices.
             *  This constructor intializes a CanIo object for use with 
             *  two VMOD-ICAN devices.
             *  @param dev0  The name of the first can device to 
             *  open (e.g. /dev/dpm_00)
             *  @param term0 Flag to control setting of onboard bus termination
             *  resistor.  Set true if card is connected to the beginning or end
             *  of a CAN bus.
             *  @param dev1 The name of the second can device (e.g./dev/dpm_01)
             *  @param term1 Termination flag (see term0 above).
             */
            CanIo (char* dev0, bool term0, char* dev1, bool term1);

            /**
             *  Destructor for CanIo object.
             */  
            ~CanIo ();

            // Input methods.

            /** 
             * Retrieve a CAN message.
             * This routine retrieves a message from the shared CAN message
             * queue.  When a message is received, it is retrieved from it's
             * respective device and placed into a shared canbus::Message
             * queue.  This routine blocks until a message is available.  
             * If the CanIo object is using the default constructor for
             * emulation, this method blocks forever, or until a message
             * is explicitly placed into the queue using 
             * CanIo::queueMessage.
             * @return Message object containing CAN message.
             */ 
            carma::canbus::Message getMessage();

            /**
             * Post a CAN message.
             * This routine sends a carma::canbus::Message to a single 
             * or multiple CANbusses.  The bus which the message will 
             * be posted to must be specified in the Message object using
             * the Message::setBusId method.  If a user wishes to send 
             * the message to all busses controlled by CanIo, use the
             * carma::canbus::ALL_BUSSES constant. If no modules are on 
             * a bus to receive a message, messages will remain in onboard 
             * buffers until a module is connected to accept them.  If this
             * onboard buffer fills up, postMessage will throw
             * an exception. 
             * @param msg carma::canbus::Message object.
             * @throw carma::canbus::Error if unable to send a message 
             * or invalid busId.
             */
            void postMessage(const carma::canbus::Message &msg) 
                throw (carma::canbus::Error);

            /** 
             * Get bus status for all busses.
             * @return map containing status of all busses keyed by bus Id.
             */
            map<busIdType, carma::canbus::busStatusType>  getBusStatus();

            // Utilities...

            /**
             *  Clear the read message queue.
             *  Clear all messages waiting for retrieval in the internal 
             *  message queue.  This is useful for bus resets and should 
             *  be done when the hardware is in a reset state and hence
             *  known not to be transmitting.
             *  @see carma::canbus::Dio::resetHi
             *  @see carma::canbus::Dio::resetLo
             */
            void clearReadQueue();

        protected:

            /**
             * Place a carma::canbus::Message in the shared msg queue.
             * This method is provided so that a simulator in an inherited 
             * class may place 'CAN' Messages into the queue as if they had 
             * been received from the CANbus.  Subsequently, any blocks
             * on CanIo::getMessage will return with the queued message.
             * @param msg carma::canbus::Message object to queue.
             */
            void queueMessage(const Message &msg);

        private:

            /**
             *  Shared message queue type. 
             *  Contains mutex, condition variable and queue
             *  of messages to access.
             */
            typedef struct queueAccessStruct {
                pthread_mutex_t mutex;
                pthread_cond_t cond;
                queue<carma::canbus::Message> messageQueue;
            } queueAccessType;

            // Member data

            pthread_t updateThreadId_;         // Thread Id for update thread
            pthread_t writeThreadId_;          // Thread Id for write thread
            queueAccessType rxQueueAccessor_;  // Received CAN message queue 
            carma::util::Time time_;           // Time class
            // Direct CAN IPQs.
            carma::util::IPQwriter<carma::canbus::Message> *writeIpq_; 
            carma::util::IPQreader<carma::canbus::Message> *readIpq_;  

            // Initialization and startup routines...

            /**
             * Initialize vmod-ican devices.
             * This must be called before the bus will start receiving 
             * messages.  It will effectively reset the VMOD-ICAN 
             * module(s), set up all interfaces (new and fast), and clear 
             * the message queue.
             */
            void initialize();

            /**
             * Initialize Direct CAN ipqs.
             * This method is essentially just a helper method to 
             * isolate the common task of creating and initializing
             * the Direct CAN ipqs among multiple constructors.
             */
            void initializeIpqs();

            /**
             * Create read/write threads as well as update thread.
             */
            void createThreads();

            // Utility routines...

            // The following two methods are protected to avoid cluttering the
            // interface.  They are implemented in the getMessage variants.

            /** 
             * Poll for arriving messages.  
             * If no argument is specified the routine will wait forever.
             * @param maxWaitInSeconds timeout. 
             */	
            bool waitForMessage(double maxWaitInSeconds = -1.0);

            /**
             * Wrapper to send a raw can message.  
             * This routine wraps the janz can_send routine.  It is useful for 
             * derived classes that communicate with multi-port devices.  These
             * devices send messages differently.
             */ 
            int canSend(int fd, ::Message* msg); 

            /**
             * Process a message from the 'fast' interface.
             * This routine converts a raw CAN message into a 
             * Message object and places it in the read queue.
             * @param dev reference to device from which message 
             * was obtained. 
             */ 
            void processFastMessage(deviceType &dev);

            /**
             * Process message from the 'new' interface.  
             * In general these are not CAN messages but rather 
             * consist of error and status messages from a CAN device.
             * @param dev device from which message originated.
             */
            void processPlainMessage(deviceType &dev);

            /**
             * CanIo copy constructor.
             * Declared protected so that it is undefined and inaccessible
             * preventing multiple instances of CanIo through copying.
             */
            CanIo (const CanIo &);

            /**
             * Operator =.
             * Also undefined and inaccessible for same reasons as copy
             * constructor.
             */
            CanIo &operator=(const CanIo &);

            // Utilities...

            /**
             * Update bus status.
             * Janz CAN modules must be probed explicitly for their
             * bus status.  This routine probes a bus for it's status
             * and is called at 1/2 second intervals by the update 
             * thread.  
             */ 
            void updateBusStatus();

            // Thread based utilities...

            /**
             * Entry point for read thread.
             * Thread entry points are needed to allow C-style calls
             * to pthreads and are thus static to provide C linkage.  
             * They are placed here (directly in the class) as opposed to
             * the global namespace (using an extern "C" linkage specifier) so
             * that we can maintain the visibility rules provided by C++.  
             */
            static void *readThreadEntry(void *arg);

            /**
             * Thread routine to read incoming CAN messages from controller and 
             * subsequently place them on a shared queue for retrieval and 
             * processing.  One thread instance will exists for each device
             * being controlled.
             * @param dev Device from which to read.
             */
            void runReadThread(deviceType &dev);

            /**
             * Entry point for write thread.
             * @param arg Naked input parameter of this*.
             */
            static void *writeThreadEntry(void *arg);

            /**
             * Thread routine to write messages from the input IPQ 
             * to the CAN bus.
             * This thread services Direct CAN messages by continuously
             * reading the input CAN ipq and posting properly addressed
             * messages to the CAN bus.
             */
            void runWriteThread();

            /**
             * Entry point for update thread.
             */	
            static void *updateThreadEntry(void *arg);

            /**
             * Thread routine to update bus status every 1/2 second.
             */
            void runUpdateThread();

    };
}; // namespace canbus
}; // namespace carma
#endif // CARMA_CANBUS_CANIO_H 
