#ifndef CARMA_UTIL_BASE_EXCEPTION_H
#define CARMA_UTIL_BASE_EXCEPTION_H

/*!
 * @file
 * @brief This is the include file for Carma exception handling utilities.
 *
 * File containing declarations for the CARMA base exception class.
 * Uses some tricks to ensure that file name and line number of location
 * where exception is created is captured by the exception handler. Actual
 * constructor uses three parameters, but most users will really use something 
 * that has only the first parameter. However, the macro definition at the
 * end of the file  will ensure that the file name and line number are 
 * inserted at the appropriate place. <br>
 * <B>WARNING</B> The macro has to be disabled if for some reason the
 * original definition of the constructor with three parameters 
 * is required. Macros may be disabled using the compiler
 * option '-Umacro', or by using '#ifdef'/'#undef' combinations in your
 * source file.
 *
 * @author N. S. Amarnath
 *
 * @see carma::util::BaseException
 */

#include <exception>
#include <string>
#include <iosfwd>
#include <vector>
#include <memory>
#include <cstdlib>
#include <cstring>

#include <log4cpp/Priority.hh>

#include "carma/util/Backtrace.h"


namespace carma  {
namespace util  {

/*!
 * @brief Base exception class for managing carma errors.
 *
 * Includes facilities for specifying and logging error messages to a default
 * process wide carma logger.
 */
class BaseException : public ::std::exception  {
    public:
        /*!
          * Destructor for BaseException.
          */
        virtual ~BaseException( ) throw( );

        /*! 
         * what - returns full text of message to be logged.
         * BaseException. 
         * \todo Must complete this function. For now, just returns 
         * message set using setMessage, or constructor. Must
         * instead return string(?) with full text.
         *
         * @return full text of error message as const char*.
         *
         * @exception undefined exception thrown - required for compatibility
         *           with std::exception.
         */
        virtual const char * what( ) const throw( );

        /*! 
         * setMessage - sets error message within this instance of class 
         * BaseException. This message may be logged when the exception 
         * is caught. BaseException::getMessage also returns the message. 
         * setMessage does not make a local copy of the string as we want 
         * to minimize the potential for exceptions generated by operations
         * in BaseException.
         *
         * @param mesg The message to be logged for this exception.
         * @return none.
         */
        virtual void setMessageDirectly( const char * mesg );

        virtual void setMessageToCopy( const char * mesg );

        /*! 
         * setMessage - sets error message within this instance of class 
         * BaseException. This message may be logged when the exception 
         * is caught. BaseException::getMessage also returns the message.
         *
         * @param istring A string containing the message to be
         *               logged for this exception.
         * @return none.
         */
        virtual void setMessageToCopy( const ::std::string & mesg );

        /*! 
         * setMessage - sets error message within this instance of class 
         * BaseException. This message may be logged when the exception 
         * is caught. BaseException::getMessage also returns the message.
         *
         * @param stream A stream containing the message to be
         *               logged for this exception.
         * @return none.
         */
        virtual void setMessageToCopy( const ::std::ostringstream & oss );

        /*! 
         * getMessage - gets error message set within this instance of class 
         * BaseException. This message may be logged when the exception is 
         * caught. BaseException::setMessage is used to
         * set the message. 
         *
         * @return error message as a constant char*.
         */
        virtual const char * getMessage( ) const;

        /*! 
         * getSourceFile - gets the name of the source file where this 
         * exception was created.  Intended to be used as a means of 
         * recording the location where the exception was thrown. 
         * The name of the source file is set as a parameter in 
         * the public constructor - should use the cpp macro '__FILE__'.
         *
         * @return source file name as a constant char*.
         */
        virtual const char * getSourceFile( ) const;

        /*! 
         * getLineNumber - gets the number of the line within the source
         * file where the exception was created. Intended to be used
         * as a means of recording the location where the exception was
         * thrown. This line number is set as a parameter in the public
         * constructor - should use the cpp macro '__LINE__'.
         *
         * @return line number as an integer.
         */
        virtual int getLineNumber( ) const;


        virtual ::std::string getLogString( ) const;

        /*! 
         * logException - logs the message associated with this instance 
         * of BaseException. Message is logged with the source file name and 
         * line number of the location where this exception was constructed.
         * The message is logged using the carma::util::Logger associated
         * with the current process.
         *
         * @param  priority Priority of the message to be logged, as a
         *                  variable of type log4cpp::Priority.
         * @return none.
         */
        void logException( log4cpp::Priority::PriorityLevel priority ) const;

        Backtrace getBacktrace( ) const;

    protected:
        explicit BaseException( );
        
        BaseException( const BaseException & rhs );

        /*! 
         * @brief Constructor - creates an instance of class BaseException. 
         * 
         * Users should use the macro definition (see the #define towards the
         * end of this file).
         *
         * @param mesg The message to be logged for this exception. 
         *             If the exception is to be caught outside the
         *             scope of the function where the exception was 
         *             constructed, then 'mesg' should not be a stack 
         *             variable. Stack variables are lost as the exception 
         *             unwinds stacks on its way to the catcher.
         * @param fileName The source file containing the code throwing the
         *                 exception - can be set using the cpp 
         *                 macro '__FILE__'.  
         * @param lineNo The line number in the source file where the
         *               exception is created - should use the cpp
         *               macro '__LINE__'.
         * @return none.
         */
        BaseException( const char * mesg,
                       const char * fileName,
                       const int    lineNo );

        BaseException( const char *          mesg,
                       const ::std::string & fileName,
                       const int             lineNo );

        BaseException( const ::std::string & mesg,
                       const char *          fileName,
                       const int             lineNo );

        BaseException( const ::std::string & mesg,
                       const ::std::string & fileName,
                       const int             lineNo );

        BaseException( const ::std::ostringstream & oss,
                       const char *                 fileName,
                       const int                    lineNo );

        BaseException( const ::std::ostringstream & oss,
                       const ::std::string &        fileName,
                       const int                    lineNo );

        BaseException & operator=( const BaseException & rhs );

        /*! 
         * setLineNumber - gets the number of the line within the source
         * file where the exception was created. Intended to be used
         * as a means of recording the location where the exception was
         * thrown. This line number is set as a parameter in the public
         * constructor - should use the cpp macro '__LINE__'.
         *
         */
        virtual void setLineNumber( int num );

        /*! 
         * setSourceFile - gets the name of the source file where this 
         * exception was created.  Intended to be used as a means of 
         * recording the location where the exception was thrown. 
         * The name of the source file is set as a parameter in 
         * the public constructor - should use the cpp macro '__FILE__'.
         *
         * @return source file name as a constant char*.
         */
        void setSourceFileDirectly( const char * file );

        void setSourceFileToCopy( const char * file );
        void setSourceFileToCopy( const ::std::string & file );

    private:
        void clearMesg( );
        void clearSourceFile( );
        
        void swap( BaseException & rhs );

        const char *        mesg_;
        bool                weAllocatedMesg_;
        const char *        sourceFile_;
        bool                weAllocatedSourceFile_;
        int                 lineNo_;
        Backtrace           backtrace_;
};  // class BaseException


}  // namespace carma::util
}  // namespace carma


//! @brief Trick to get the file name and line number passed to the exception
//!        handler.
//!
//! Constructs an instance of the type specified by argument @a x using argument
//! @a y as the first parameter to the constructor and automagically generating
//! the file and line number parameters to the constructor.
//!
//! @hideinitializer
#define CARMA_EXCEPTION(x,y) x((y), __FILE__, __LINE__)

//! @brief Macro for testing a condition and then logging and throwing a 
//!         BaseException or derivative if the condition is false.
//! 
//! This macro tests the input condition and upon failure, creates an
//! input exception type with the specified message, logs it at the ERROR
//! priority level and finally throws the exception.
//!
//! @hideinitializer
#define CARMA_TEST( e, ce, m )                            \
do {                                                      \
    if ( ! (e) )                                          \
    {                                                     \
        ::std::ostringstream os;                          \
        os << "CARMA_TEST FAIL: " << m;                   \
        ce error( os, __FILE__, __LINE__);                \
        error.logException(::log4cpp::Priority::ERROR);   \
        throw error;                                      \
    }                                                     \
} while (false)

#endif    // CARMA_UTIL_BASE_EXCEPTION_H


