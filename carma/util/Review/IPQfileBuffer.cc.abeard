
/**
 *
 * Implementation for the IPQfileBuffer class.
 *
 * Original author: Steve Scott
 *                  24 Apr, 2003
 *
 * $Id: IPQfileBuffer.cc.abeard,v 1.1 2003/07/16 18:46:08 abeard Exp $
 *
 */

/**** REVIEW
 * Reviewer: abeard
 * Comments: No specific comments. See IPQbuffer.cc.abeard for comments
 * that apply to this file as well.
 */

// Solaris needs this POSIX defn for sys/mman
#define _POSIX_C_SOURCE 199506L

#include <sys/mman.h>

#include <fcntl.h>
#include <iostream>
#include <iomanip>

#include "carma/util/IPQfileBuffer.h"

using namespace std;

namespace carma {
    namespace util {
 


IPQfileBuffer::IPQfileBuffer(
    char*         localElement, 
    int           elementSize, 
    const string& filename, 
    bool          isCreator,
    int           nElements) throw(exception) :
        IPQbufferBase(localElement, elementSize, filename,
            isCreator, nElements)    
{
}


IPQfileBuffer::~IPQfileBuffer() 
{
}

bool IPQfileBuffer::openBuffer() 
{
    const char* trimmedFilename = getTrimmedFilename().c_str();
    fileDescriptor_ = open(trimmedFilename, openMask_, 
        protectionMask_);
    if (debug_) cout<<"openBuffer(file):"<<trimmedFilename
                    <<" fd:"<<fileDescriptor_<<endl;
    if (fileDescriptor_ == -1) return false; 
    return true;
}

bool IPQfileBuffer::createBuffer() 
{
    fileDescriptor_ = open(getTrimmedFilename().c_str(), 
        openMask_ | O_CREAT, protectionMask_);
    if (fileDescriptor_ == -1) return false; 
    return true;
}
  

} }  // End namespace carma::util  







