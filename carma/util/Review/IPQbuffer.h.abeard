
#ifndef CARMA_UTIL_IPQBUFFER_H
#define CARMA_UTIL_IPQBUFFER_H

/**
 * @file 
 * IPQ (InterProcessQueue) provides a generic way for information to be
 * shared between processes or threads. 
 * This class provides access for a shared memory implementation of
 * the generic base class.
 *
 * Original author: Steve Scott
 *                  24 Apr, 2003
 *
 * $Id: IPQbuffer.h.abeard,v 1.1 2003/07/16 18:46:07 abeard Exp $
 *
 */

#include "carma/util/IPQbufferBase.h"

/**** REVIEW
 * Reviewer: abeard
 * Comments: Consider moving this entire block of includes to the 
 * implementation file as none are needed to declare or use the interface.
 */
// Solaris
#define _POSIX_C_SOURCE 199506L
#include <sys/types.h>
#include <sys/mman.h>
#include <sys/uio.h>

/**** REVIEW
 * Reviewer: abeard
 * Comments: Consider removing per new rule and fully qualifying std variables.
 */
using namespace std;

namespace carma {
    namespace util {
 

/**
 * Shared memory storage mechanism. for an IPQ buffer.
 *
 * This class is a  base class for reader and writer classes.
 * See for e.g.
 * @see IPQreader, IPQwriter
 */
class IPQbuffer: public IPQbufferBase {
protected:

/**** REVIEW
 * Reviewer: abeard
 * Comments: Again consider replacing 'exception' with carma::util::Error.
 */
    /**
    **  Constructor
    **  @param localElement address of the data buffer for reads/writes
    **  @param elementSize of an individual queue element in bytes
    **  @param filename Shared memory filename.
    **         Must start with '/' and be less than 15 chars long.
    **  @param isCreator If true, create a new file if one doesn't exist, 
    **              and make its size match nElements         
    **  @param nElements Number of elements to allocate (queue length);
    **             ignored if not a creator.
    */
    IPQbuffer(
              char*         localElement, 
              int           elementSize, 
              const string& filename, 
              bool          isCreator = false,
              int           nElements = 0) 
            throw(exception) ;

public:
    /**
     * Destructor
     */
    virtual ~IPQbuffer();

private:    
    /**
     * Open an existing shared memory buffer
     */
    virtual bool openBuffer();

    /**
     * Create a new shared memory buffer
     */
    virtual bool createBuffer();
};

} } // End of namespace carma::util

#endif  // CARMA_UTIL_IPQBUFFER_H














