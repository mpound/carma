"""
Flux calibration script

Options in default:
run('fluxcal list=weekly fullstartover=False band=both pnt=True endtrack=None startprimary=True alarm=True')

Options:
list = weekly, monthly, full
fullstartover = True/False    
    # to start over the full list of flux calibrators 
    # it works only with list=full
band = both, 1mm, 3mm
pnt = True/False
endtrack 
    # in the same way for science scripts 
    # it can be issued in other sac windows while running
startprimary = True/False
alarm = True/False
    # to turn on/off alarm at the end of the track

2008 Oct.  7, Woojin Kwon: Start using this new script
2008 Oct. 15, WK: Correction for observing the noise source at 3mm
2008 Oct. 27, WK: imply 'import obsdefUtils'
2008 Oct. 31, WK: resolve the source number issue limited 32
2008 Oct. 31, WK: resolve *done.list issue (when the file is empty, it's not working)
2008 Nov.  4, WK: modify to have primary observations in each trial track in the full list runs
"""

import subarrayCommands as sac
import obsdef2 as od
import obsdefUtils as odutil
import fluxcalinput as fxinput
import fluxcalutil as fxutil
import os

# #################################################
# Read options and set initial variables
# #################################################

options = dict()
options['list']         = 'weekly'
options['fullstartover']= False
options['band']         = 'both'
options['pnt']          = True
options['startprimary'] = True
options['alarm']        = True
options['endtrack']     = None
#options['endtrack']     = sac.getLstEndTrack(string=True)

# Parse command line arguments
try :
    if scriptOptions != '' and scriptOptions <> None:
        odutil.readOptions(scriptOptions, options)
except:
    print "\n\nHELP Info:\n", __doc__
    raise Exception, 'Exiting'

projectCode = 'flux'
whichList   = options['list']
fullstartover= options['fullstartover']
whichBand   = options['band']
dopointing  = options['pnt']
startPrimary= options['startprimary']
endAlarm    = options['alarm']
sac.setLstEndTrack(options['endtrack'])
obsblockName= whichList+'_'+whichBand

print "Script options : ", scriptOptions
#print whichList, whichBand, dopointing, startPrimary, endAlarm, options['endtrack']

# project information
projectInfo = {
   'emailAddress'  : 'wkwon@astro.uiuc.edu,obs@ovro.caltech.edu',
   'code'          : projectCode,
   'obsblock'      : obsblockName,
   'subobsblock'   : sac.yearMonthDay(),
   'sourceCatalog' : None,
  }

# Integration variables
if whichList == 'weekly':
    tint   = 5.  # in min
    record = 10. # in sec
    nreps  = odutil.getNreps(tint, record)
else:
    tint   = 3.  # in min
    record = 20. # in sec
    nreps  = odutil.getNreps(tint, record)

# #################################################
# Main script
# #################################################

# Initialize the fluxcaldone list to start over
#--------------------------------------------------
if whichList == 'full' and fullstartover :
    filename='/home/obs/scripts/flux/fluxcaldone'+whichBand+'.list'    
    if os.system('ls %s' % filename) == 0 :
        os.system("mv -f %s %s" % (filename, filename+sac.yearMonthDay()))
    #os.system("touch %s" % filename) 
    fxutil.addtofiledone(sac.yearMonthDay(),whichBand)
    sac.trackMessage("fluxcaldone%s.list initialized" % whichBand, indent=1)

# Check primary and possible calibrators
#--------------------------------------------------
primary = fxutil.selectPrimary(whichList)
if primary == None and startPrimary :
    raise Exception, "No primary calibrators are available. Please run later or use 'startprimary=False'"
primaryDone = False

calList     = []
calibrators = fxutil.possibleCals(whichList,whichBand)
for cal in calibrators:
    if cal == primary : continue
    calList.append(cal)
if calList == [] :
    raise Exception, "No calibrators are available. Please run later or try other lists.'"

# Initialize system
#--------------------------------------------------
od.initializeTrack(fxinput.sources, fxinput.mosaic, projectInfo, fxinput.limits, 
                   fxinput.pointing, fxinput.passband, fxinput.fluxcal, 
                   restart=restartScript, scriptName=scriptName, scriptOptions=None)
fxinput.correlator['configCal'] = None

# Send email indicating the script run
#--------------------------------------------------
if odutil.emailScriptLog():
    odutil.sendEmail(projectInfo['code'], projectInfo['emailAddress'], fullScriptName, 
                     scriptOptions, start=True, restart=restartScript)

# Tune
#--------------------------------------------------
if whichBand == '1mm' : fxutil.tune1mm()
else : fxutil.tune3mm()

startLst = sac.lst()

# First primary observation 
#--------------------------------------------------
primary = fxutil.selectPrimary(whichList)
if primary == None and startPrimary :
    raise Exception, "No primary calibrators are available. Run later or use 'startprimary=False'"
if primary <> None and startPrimary :
    odutil.observeNoise(fxinput.noise['tint'], fxinput.noise['record'], indent=1)
    if dopointing: 
        sac.trackMessage("Checking pointing", indent=1)
        od.doPoint(fxinput.pointing, ref=primary, correlator=fxinput.correlator, indent=2) 
    fxutil.observeSource(primary,'F',tint,record,nreps)     # 'F' flux cal (primary), 'G' gain cal
    if whichBand == 'both' :
        fxutil.tune1mm()
        odutil.observeNoise(fxinput.noise['tint'], fxinput.noise['record'], indent=1)
        fxutil.observeSource(primary,'F',tint,record,nreps) 
    primaryDone = True
    sac.trackMessage("Primary calibrator's done.", indent=1)
    
# Calibrator observation
#--------------------------------------------------
calListDone = []
ncalDone = 0

while 'woojin' <> 'kwon' : 
    calList     = []
    if odutil.getLstEndTrack() <> None: 
        timeLeft = odutil.getLstEndTrack() - sac.lst()
        if startLst > odutil.getLstEndTrack(): timeLeft += 24.
    if odutil.getLstEndTrack() <> None and timeLeft < 0.1 : break    

    if ncalDone <> 0 and ncalDone%20 == 0 : 
        sac.resetProject()
        #sac.newProject('flux',obsblockName,sac.yearMonthDay())
        od.initializeTrack(fxinput.sources, fxinput.mosaic, projectInfo, 
           fxinput.limits, fxinput.pointing, fxinput.passband, fxinput.fluxcal, 
           restart=True, scriptName=scriptName, scriptOptions=None)

        primaryDone = False
        primary = fxutil.selectPrimary(whichList)
        if primary <> None :
            odutil.observeNoise(fxinput.noise['tint'], fxinput.noise['record'], indent=1)
            if dopointing: 
                sac.trackMessage("Checking pointing", indent=1)
                od.doPoint(fxinput.pointing, ref=primary, correlator=fxinput.correlator, indent=2) 
            fxutil.observeSource(primary,'F',tint,record,nreps)     # 'F' flux cal (primary), 'G' gain cal
            primaryDone = True
            sac.trackMessage("Primary calibrator's done.", indent=1)

    calibrators = fxutil.possibleCals(whichList,whichBand)
    for cal in calibrators:
        if cal == primary : continue
        if cal in calListDone : continue
        calList.append(cal)

    if calList == [] : break
    if primary <> None and not startPrimary : 
        sourceData = fxutil.sortSources([primary]+calList)
    else:
        sourceData = fxutil.sortSources(calList)

    print "  i name     az(deg) el(deg)      Time-Up Time-Transit"
    print "------------------------------------------------------"
    i = 0
    for s in sourceData:
        i=i+1
        print "%3d %8s %7.1f %7.1f %12.1f %12.1f" % (i,s[0],s[1],s[2],s[3],s[4])
        if i==3: break
    print "------------------------------------------------------"

    if whichBand == 'both' : fxutil.tune3mm()
    odutil.observeNoise(fxinput.noise['tint'], fxinput.noise['record'], indent=1)
    currentTarget = sourceData[0][0]
    if dopointing: 
        od.doPoint(fxinput.pointing,ref=currentTarget,correlator=fxinput.correlator,indent=2)
    if currentTarget == primary :
        fxutil.observeSource(currentTarget,'F',tint,record,nreps)
        if whichBand == 'both' :
            fxutil.tune1mm()
            odutil.observeNoise(fxinput.noise['tint'], fxinput.noise['record'], indent=1)
            fxutil.observeSource(currentTarget,'F',tint,record,nreps) 
        primaryDone = True
        sac.trackMessage("Primary calibrator's done.", indent=1)
    else :
        fxutil.observeSource(currentTarget,'G',tint,record,nreps)
        if whichBand == 'both' :
            fxutil.tune1mm()
            odutil.observeNoise(fxinput.noise['tint'], fxinput.noise['record'], indent=1)
            fxutil.observeSource(currentTarget,'G',tint,record,nreps) 
        sac.trackMessage("%s is done." % currentTarget, indent=1)
        calListDone.append(currentTarget)
        if whichList == 'full' : fxutil.addtofiledone(currentTarget, whichBand)
        ncalDone += 1

# Last primary observation
#--------------------------------------------------
if not primaryDone :
    primary = fxutil.selectPrimary(whichList)
    if whichBand == 'both' : fxutil.tune3mm()
    odutil.observeNoise(fxinput.noise['tint'], fxinput.noise['record'], indent=1)
    if dopointing: 
        sac.trackMessage("Checking pointing", indent=1)
        od.doPoint(fxinput.pointing, ref=primary, correlator=fxinput.correlator, indent=2) 
    fxutil.observeSource(primary,'F',tint,record,nreps)     # 'F' flux cal (primary), 'G' gain cal
    if whichBand == 'both' :
        fxutil.tune1mm()
        odutil.observeNoise(fxinput.noise['tint'], fxinput.noise['record'], indent=1)
        fxutil.observeSource(primary,'F',tint,record,nreps) 
    primaryDone = True
    sac.trackMessage("Primary calibrator's done.", indent=1)

# Print track summary
#--------------------------------------------------
sac.trackMessage("Primary flux cal : %s" % str(primaryDone), indent=1)
sac.trackMessage("Number of cal    : %i" % ncalDone, indent=1)
totaltime =  sac.lst() - startLst
if totaltime < 0. : totaltime += 24.
sac.trackMessage("Track total time : %4.1f" % totaltime, indent=1)

# Send email indicating track is finished
#--------------------------------------------------
if odutil.emailScriptLog():
    odutil.sendEmail(projectInfo['code'], projectInfo['emailAddress'],
                 fullScriptName, scriptOptions, msg=odutil.getTrackHistory())

# Done
#--------------------------------------------------
sac.resetProject()
if endAlarm: sac.alarmon()


