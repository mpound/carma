
# Define carma devices (remote DOs for hardware, e.g. antennas, LOs)
#
# @author Steve Scott
# $Id: device.py,v 1.50 2012/11/28 15:57:57 mpound Exp $
#
# $CarmaCopyright$
#

import types

# Access for all carma remote device DOs
import carmaIni
import carma   # Generated by the idl 

class CarmaAnt(object):
    """Holds all carma antennas, ordered so that you can get names"""
    def __init__(self):
        self.ovro  = ("ovro", 6)
        self.bima  = ("bima", 9)
        self.sza   = ("sza",  8)
        self.ants = (self.ovro, self.bima, self.sza)
        self.totalAnts = 0
        for i in self.ants:
            self.totalAnts += i[1]
    def rangecheck(self, value):
        "Check that carma antenna number is in range"
        msg = "Carma antenna number (%d), " %(value)
        msg = msg + "must be between 1 and %d" %(self.totalAnts)
        if value < 1:              raise ValueError, msg      
        if value > self.totalAnts: raise ValueError, msg      
    def getNumAnts(self):
        "Get the total number of carma antennas"
        return self.totalAnts
    def getName(self, carmaAntnum):
        "Get the name of a carma Antenna by number (starting at 1)"
        self.rangecheck(carmaAntnum)
        k = 0
        for i in self.ants:
            k += i[1]
            if k >= carmaAntnum:
                antnum = i[1] - (k - carmaAntnum)
                antname = i[0] + str(antnum)
                return antname
    def getTypeString(self, carmaAntnum):
        "Get the type of a carma antenna ('ovro', 'bima', 'sza')"
        self.rangecheck(carmaAntnum)
        k = 0
        for i in self.ants:
            k += i[1]
            if k >= carmaAntnum:
                return i[0] 
    def getAllNames(self):
        "Get a tuple of all the names of carma antennas"
        k = []
        for i in range(self.getNumAnts()):
            k.append(self.getName(i+1))
        return k
    def getNum(self,carmaAntName):
        "Get the number of an ant by name"
        k = 0
        for i in self.getAllNames():
            k+=1
            if ( carmaAntName == i ):
              return k
    def isOvro(self, carmaAntNum):
        "Return boolean indicating whether antenna number is an ovro antenna"
        return self.getTypeString(carmaAntNum) == "ovro"
    def isBima(self, carmaAntNum):
        "Return boolean indicating whether antenna number is a bima antenna"
        return self.getTypeString(carmaAntNum) == "bima"
    def isSza(self, carmaAntNum):
        "Return boolean indicating whether antenna number is an sza antenna"
        return self.getTypeString(carmaAntNum) == "sza"
    def getDiameter(self, carmaAntNo) :
        if self.isOvro(carmaAntNo) :    return 10.4
        elif self.isBima(carmaAntNo) :  return 6.1
        else :                          return 3.5
        
class Ant(object) :
    """Base (common) class for all antennas; 
    use derived classes Bima, Ovro, or Sza instead of this"""
    def __init__(self, anttype, antnum, antlabel): 
        """Create an antenna device
          param anttype (e.g. \"ovro\")
          param: antnum
          param: antlabel - used with antnum to construct a label"""
        if not isinstance(antnum, types.IntType):
            m = "Input antnum (%s) is not an integer" %str(antnum)
            raise Exception, m 
        self.antnamecheck(anttype, antnum)
        self.antnum_      = antnum
        self.carmaAntnum_ = self.computeCarmaAntnum(anttype, antnum) 
        self.anttype_     = anttype 
        self.antname_     = anttype  + str(antnum) 
        self.antlabel_    = antlabel + str(antnum)
        self.antDo_       = None # will be set by specific ant type
    def rangecheck(self, upper, value):
        "Check that antenna number is in range"
        msg = "Antenna number (%d), must be between 1 and %d" %(value,upper)
        if value < 1:     raise ValueError, msg      
        if value > upper: raise ValueError, msg      
    def antnamecheck(self, anttype, antnum):
        if    anttype == "bima" :  self.rangecheck(9, antnum)
        elif  anttype == "ovro" :  self.rangecheck(6, antnum)
        elif  anttype == "sza" :   self.rangecheck(8, antnum)
        else :
            msg = "Antenna type (%s) is illegal; must be bima, ovro, or sza" %anttype 
            raise ValueError, msg
    def computeCarmaAntnum(self, anttype, antnum):
        if    anttype == "bima" :  return 6 + antnum
        elif  anttype == "ovro" :  return antnum
        elif  anttype == "sza" :   return 15 + antnum
        else :
            msg = "Antenna type (%s) is illegal; must be bima, ovro, or sza" %anttype 
            raise ValueError, msg
    def getCarmaAntnum(self) : return self.carmaAntnum_
    def getCarmaAntname(self) : return "C" + str(self.carmaAntnum_)
    def getAntnum(self) :      return self.antnum_
    def getName(self) :        return self.antname_
    def getLabel(self) :       return self.antlabel_
    def getRootDOname(self):   return "carma." + self.antname_ + "." 
    rootDOname = property(getRootDOname, "Get the root of the DO name as a string")
    def getDOref(self, name, DOname):
        """Get a reference to DO; return 0 if none available.
        param: name - used for error messages
        param: DOname - the right most part of the DO name; carma.antSpecific
            is prepended."""
        try:
            fullname = self.rootDOname + DOname
            return carmaIni.getObj(fullname)
        except Exception, ex:
            print "Error: couldn't get " + self.antname_ + " antenna " + name + " ref"
            print "  " + str(ex)
            return 0
    def calibrator(self):
        "Get a reference to a calibrator DO; return 0 if none available"
        return self.getDOref("calibrator", "Calibrator")
    def cryo(self):
        "Get a reference to a cryo DO; return 0 if none available"
        return self.getDOref("cryo", carma.antenna.common.CRYO_NAME)
    def drive(self):
        "Get a reference to a drive DO; return 0 if none available"
        return self.getDOref("drive", carma.antenna.common.DRIVE_NAME)
    def focus(self):
        "Get a reference to a focus DO; return 0 if none available"
        return self.getDOref("focus", carma.antenna.common.FOCUS_NAME)
    def opticalTel(self):
        "Get a reference to an opticalTel DO; return 0 if none available"
        return self.getDOref("opticalTel", carma.antenna.common.OPTICAL_TEL_NAME)
    def rxSelect(self):
        "Get a reference to a rx (receiver) selector DO; return 0 if none available"
        return self.getDOref("rx", carma.antenna.common.RXSELECTOR_NAME)
    def rx1cm(self):
        "Get a reference to a 1 cm rx (receiver) DO; return 0 if none available"
        rxsel = self.rxSelect()
        if rxsel == 0: return 0
        try:
            return rxsel.Rx(carma.antenna.common.RxControl.RX1CM)
        except Exception, ex:
            print "Error: couldn't get ref to 1 cm rx"
            print "  " + str(ex)
            return 0
    def rx3mm(self):
        "Get a reference to a 3 mm rx (receiver) DO; return 0 if none available"
        rxsel = self.rxSelect()
        if rxsel == 0: return 0
        try:
            return rxsel.Rx(carma.antenna.common.RxControl.RX3MM)
        except Exception, ex:
            print "Error: couldn't get ref to 3 mm rx"
            print "  " + str(ex)
            return 0
    def rx1mm(self):
        "Get a reference to a 1 mm rx (receiver) DO; return 0 if none available"
        rxsel = self.rxSelect()
        if rxsel == 0: return 0
        try:
            return rxsel.Rx(carma.antenna.common.RxControl.RX1MM)
        except Exception, ex:
            print "Error: couldn't get ref to 1 mm rx"
            print "  " + str(ex)
            return 0
    def resetCanbus(self):
        "Reset all CAN modules."
        if self.antDo_ == 0: 
            print "Reference to antDO is null!" 
        else :
            try:
                self.antDo_.resetAllCanModules()
            except Exception, ex:
                print "Error: couldn't reset CAN modules!"
                print "  " + str(ex)

# -------------------------------------------------------------------------
class Ovro(Ant):
    "Ovro antennas"
    def __init__(self, antnum): 
        "Create an ovro antenna device\n param: ant#"
        Ant.__init__(self, "ovro", antnum, "10M#")
        self.antDo_ = self.getDOref("antcontrol", 
            carma.antenna.common.ANTENNA_NAME)
    def tiltmeter(self):
        "Get a reference to an ovro tiltmeter DO; return 0 if none available"
        return self.getDOref("tiltmeter", carma.antenna.common.TILTMETER_NAME)
    def enviro(self):
        "Get a reference to an ovro environmental monitor DO; return 0 if none available"
        return self.getDOref("enviro", carma.antenna.ovro.ENVIRONMENT_NAME)
    def rxthermal(self):
        "Get a reference to an ovro rx electronics thermal control DO; return 0 if none available"
        return self.getDOref("rxthermal", carma.antenna.ovro.RX_TEMPERATURE_CONTROL_NAME)

# -------------------------------------------------------------------------
class Bima(Ant):
    "Bima antennas"
    def __init__(self, antnum): 
        "Create a bima antenna device\n param: ant#"
        Ant.__init__(self, "bima", antnum, "6M#")
        self.antDo_ = self.getDOref("antcontrol", 
            carma.antenna.common.ANTENNA_NAME)
    
# -------------------------------------------------------------------------
class Sza(Ant):
    "Sza antennas"
    def __init__(self, antnum): 
        "Create an sza antenna device\n param: ant#"
        Ant.__init__(self, "sza", antnum, "3M#")
    
# -------------------------------------------------------------------------
class Carma(Ant) :
    "Carma antenna, but with type specific name"
    def __init__(self, antnum) :
        if (antnum <= 0) :
            raise Exception, "Antenna number (%d) must be > 0" %antnum
        if (antnum > 23) :
            raise Exception, "Antenna number (%d) must be <= 23" %antnum
        if (antnum <= 6) :
            Ant.__init__(self, "ovro", antnum, "10M#")
        elif (antnum <= 15) :
            Ant.__init__(self, "bima", antnum - 6, "6M#")
        else :
            Ant.__init__(self, "sza", antnum - 15, "3M#")

# -------------------------------------------------------------------------
# Other devices (DO's)

def getClock():
    "Get a reference to control DO for the master clock"
    try:
        c = carmaIni.getObj("carma.clock.ClockControl")
    except Exception, ex:
        print "Error: couldn't get clock system ref"
        print "  " + str(ex)
        return 0
    try:
        return c.GlobalClock()
    except Exception, ex:
        print "Error: couldn't get clock control ref"
        print "  " + str(ex)
        return 0

def getWbdcSystem():
    "Get a reference to master DO for the downconverter system"
    try:
        return carmaIni.getObj("carma.downconverter.WbdcControl")
    except Exception, ex:
        print "Error: couldn't get wbdc system ref"
        print "  " + str(ex)
        return 0

def getWbdc():
    "Get a reference to control DO for all the wideband downconverter"
    w = getWbdcSystem()
    if w == 0: return 0
    try:
        return w.GlobalDownconverter()
    except Exception, ex:
        print "Error: couldn't get wbdc global module ref"
        print "  " + str(ex)
        return 0

def getWbdcmod(band, input):
    """Get a reference to control DO for a single wideband downconverter module
    param:  band#, starts at 1
    param:  input#, starts at 1"""
    w = getWbdcSystem()
    if w == 0: return 0
    try:
        return w.Downconverter(input, band)
    except Exception, ex:
        print "Error: couldn't get wbdc module for" + \
            " band=%d, input=%d" %(band,input) 
        print "  " + str(ex)
        return 0

def getWbNoiseSource():
    "Get a reference to control DO for the wideband downconverter noise source"
    w = getWbdcSystem()
    if w == 0: return 0
    try:
        return w.NoiseSource()
    except Exception, ex:
        print "Error: couldn't get wbdc noise source ref"
        print "  " + str(ex)
        return 0

def getWbQuadmod():
    "Get a reference to control DO for all the wideband quadmods"
    wbdc = getWbdcSystem()
    if wbdc == 0: return 0
    try:
        return wbdc.GlobalQuadMod()
    except Exception, ex:
        print "Error: couldn't get Wbdc QuadMod ref"
        print "  " + str(ex)
        return 0

def getWbLomon():
    "Get a reference to control DO for all the wideband downconverter LOmonitor"
    wbdc = getWbdcSystem()
    if wbdc == 0: return 0
    try:
        return wbdc.LoMonitor()
    except Exception, ex:
        print "Error: couldn't get Wbdc LO monitor ref"
        print "  " + str(ex)
        return 0

def getSldcSystem():
    "Get a reference to master DO for the spectral line downconverter system"
    try:
        return carmaIni.getObj(carma.downconverter.SLDCCONTROL_NAME)
    except Exception, ex:
        print "Error: couldn't get sldc system ref"
        print "  " + str(ex)
        return 0

def getSldc():
    "Get a reference to control DO for all the spectral line downconverter"
    w = getSldcSystem()
    if w == 0: return 0
    try:
        return w.GlobalDownconverter()
    except Exception, ex:
        print "Error: couldn't get sldc global module ref"
        print "  " + str(ex)
        return 0

def getSldcmod(band, input):
    """Get a reference to the control DO for a single specral line 
    downconverter module. 
    Params:
     band:  band#, starts at 1 
     input: input#, starts at 1"""
    w = getSldcSystem()
    if w == 0: return 0
    try:
        return w.Downconverter(input, band)
    except Exception, ex:
        print "Error: couldn't get sldc module for" + \
            " band=%d, input=%d" %(band,input) 
        print "  " + str(ex)
        return 0

def getSlNoiseSource():
    "Get a reference to control DO for the wideband downconverter noise source"
    w = getSldcSystem()
    if w == 0: return 0
    try:
        return w.NoiseSource()
    except Exception, ex:
        print "Error: couldn't get sldc noise source ref"
        print "  " + str(ex)
        return 0

def getSlQuadmod():
    "Get a reference to control DO for all the wideband quadmods"
    w = getSldcSystem()
    if w == 0: return 0
    try:
        return w.GlobalQuadMod()
    except Exception, ex:
        print "Error: couldn't get Sldc QuadMod ref"
        print "  " + str(ex)
        return 0

def getSlLomon():
    "Get a reference to control DO for all the specline downconverter LOmonitor"
    w = getSldcSystem()
    if w == 0: return 0
    try:
        return w.LoMonitor()
    except Exception, ex:
        print "Error: couldn't get Sldc LO monitor ref"
        print "  " + str(ex)
        return 0

def getDelayEngine():
    "Get a reference to the control DO for the delay engine"
    try:
        return carmaIni.getObj("carma.interferometry.delayEngine")
    except Exception, ex:
        print "Error: couldn't get delay engine ref"
        print "  " + str(ex)
        return 0

def getLoberotator():
    "Get a reference to the master control DO for the loberotator"
    try:
        return carmaIni.getObj("carma.loberotator.LoberotatorControl")
    except Exception, ex:
        print "Error: couldn't get loberotator  ref"
        print "  " + str(ex)
        return 0

def getLoRef():
    "Get a reference to the control DO for the LOref"
    try:
        return carmaIni.getObj("carma.loref.loReferenceControl")
    except Exception, ex:
        print "Error: couldn't get LoRef reference"
        print "  " + str(ex)
        return 0

def getCorrelator(band):
    "Get a reference to a correlator band\n  param:band#, starts at 1"
    try:
        return carmaIni.getObj("carma.correlator.slcControl%d" %band)
    except Exception, ex:
        print "Error: Could not get correlator band%d reference" %band
        print "  " + str(ex)
        return 0

def getSlPipeline():
    "Get a reference to the spectral line pipeline"
    try:
        return carmaIni.getObj(carma.pipeline.SPECTRAL_PIPELINE_NAME)
    except Exception, ex:
        print "Error: Could not get spectral pipeline"
        print "  " + str(ex)
        return 0

def getVlbi(band):
    "Get a reference to a VLBI band\n  param:band#, starts at 1"
    try:
        return carmaIni.getObj("carma.vlbi.band%d" %band)
    except Exception, ex:
        print "Error: Could not get VLBI band%d reference" %band
        print "  " + str(ex)
        return 0

def getWbPipeline():
    "Get a reference to the wideband pipeline"
    try:
        return carmaIni.getObj(carma.pipeline.WIDEBAND_PIPELINE_NAME)
    except Exception, ex:
        print "Error: Could not get wideband pipeline"
        print "  " + str(ex)
        return 0

def getFault():
    "Get a reference to the fault system"
    try:
        return carmaIni.getObj(carma.fault.FAULT_CONTROL_NAME)
    except Exception, ex:
        print "Error: Could not get fault system"
        print "  " + str(ex)
        return 0

def getOvroRx1mm(ant):
    "Get a reference to the ovro antenna 1mm rx DO\n  param: ant#, starts at 1"
    try:
        return carmaIni.getObj("carma.ovro%d.Rx1mm" %ant)
    except Exception, ex:
        print "Error: couldn't get ovro%d" %ant + " antenna 1mm rx ref"
        print "  " + str(ex)
        return 0

def getOvroRx3mm(ant):
    "Get a reference to the ovro antenna 3mm rx DO\n  param: ant#, starts at 1"
    try:
        return carmaIni.getObj("carma.ovro%d.Rx3mm" %ant)
    except Exception, ex:
        print "Error: couldn't get ovro%d" %ant + " antenna 3mm rx ref"
        print "  " + str(ex)
        return 0

def getAlarm():
    "Get a reference to the alarm control"
    try:
        return carmaIni.getObj("carma.alarm.AlarmControl")
    except Exception, ex:
        print "Error: couldn't get alarm control ref"
        print "  " + str(ex)
        return 0

def getBimaRx1cm(ant) :
    "Get a reference to the bima antenna 1cm rx DO\n  param: ant#, starts at 1"
    try:
        return carmaIni.getObj("carma.bima%d.cmRxControl" %ant)
    except Exception, ex:
        print "Error: couldn't get bima%d" %ant + " antenna 1cm rx ref"
        print "  " + str(ex)
        return 0

def getProjectDbMgr():
   "Get a reference to the project database manager"
   try:
       return carmaIni.getObj("carma.projectDatabaseManager.projectDatabaseManagerControl")
   except Exception, ex:
       print "Error: couldn't get project database manager reference."
       print "  " + str(ex)
       return 0
       
def getLinelength():
   "Get a reference to the linelength control DO"
   try:
       return carmaIni.getObj(carma.linelength.LINELENGTH_NAME)
   except Exception, ex:
       print "Error: couldn't get linelength reference."
       print "  " + str(ex)
       return 0
       
def getTipper():
    """Get a reference to the tipper control DO."""
    try:
        return carmaIni.getObj( carma.tipper.TIPPER_NAME )
    except Exception, ex:
        print "Error: couldn't get tipper reference."
        print "  " + str(ex)
        return 0

def getState():
    """Get a reference to the carma system state DO."""
    try:
        return carmaIni.getObj( carma.control.SYSTEM_STATE_NAME )
    except Exception, ex:
        print "Error: couldn't get system state reference."
        print "  " + str(ex)
        return 0

def getSignalPath():
    """Get a reference to the Signal Path Mapper DO."""
    try:
        return carmaIni.getObj( carma.signalpath.SIGNALPATHMAPPERCONTROL_NAME )
    except Exception, ex:
        print "Error: couldn't get SignalPath reference."
        print "  " + str(ex)
        return 0

