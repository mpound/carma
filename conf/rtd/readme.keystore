$Id: readme.keystore,v 1.4 2014/03/24 21:24:30 mpound Exp $

Instructions on how to create and test a new digital signature for the
RTD jar file (or any jar file).

Navigate to the RTD configuration directory
###########################################

$ cd $CARMA/conf/rtd

Use the keytool program from the JDK to create a new key
########################################################

Give this key a long validity (such as 10000 days).

$ keytool --keystore ./keystore.rtd --genkey -alias CARMAForever \
	--keypass Carma4All --storepass RtdR00lz \
	-dname "cn=Marc W. Pound, ou=CARMA, o=University of Maryland, c=US" \
	-validity 10000

Use the keytool program from the JDK to export the public key
#############################################################

This public key will need to be present in the same location as the
JNLP file used for Java Web Start. It is required that users import
this certificate for Java Web Start to run the JAR.

Instructions on how to import the certificate are present on the
RTD instructions web page.

$ keytool --keystore ./keystore.rtd --alias CarmaForever \
	--storepass RtdR00lz \
	--export --rfc --file ./rtd.csr

Edit build.xml.in signjars target to match the new key and passwords
####################################################################

EXAMPLE:

    <signjar jar="${dist}/lib/jrtd.jar" storepass="RtdR00lz"
             keypass="Carma4All" alias="CARMAForever"
             keystore="${confdir}/rtd/keystore.rtd"
    />


Build your new JAR file
#######################

$ cd $CARMA
$ autoreconf -if
$ cd $BUILD
$ make -j8 && make -j8 java

This ensures build.xml.in and keystore.rtd get copied before the build.
Watch the ant signjars step to make sure the new key/pass is used.

Test your new JAR file
######################

On cedarflat.mmarray.org:

$ cp $BUILD/dist/lib/jrtd.jar /home/obs/web_pages/observing/tools/jrtdtest.jar
$ cp $CARMA/conf/rtd/rtd.csr /home/obs/web_pages/observing/tools/rtdtest.csr

Import the certificate into your local Java installation, following the
instructions on the RTD web page.

Then visit:

http://cedarflat.mmarray.org/observing/tools/rtdtest.jnlp

You should see a new jar loading and when the application launches
you will be asked to verify the new signature.   If this fails
check that what you entered in step 3 matches step 2.  

Linux Users Instructions to import certificate
##############################################
Start the jcontrol application.
Click on the "Security" tab.
Click on the "Manage Certificates..." button.
Change the "Certificate type" to "Signer CA".
Click the "Import" button.
Select the rtd.csr file created earlier.
Click on the "Open" button.
Click on the "Close" button in the "Manage Certificates" dialog window.
Click on the "OK" button in the Java Control Panel dialog window.

====================================

Wed Feb 26 11:49:12 EST 2014

1. Generate certificate request for Digicert code-signing certificate:

%   keytool -genkey -alias UMDCARMA -keyalg RSA -keysize 2048 -keystore ./keystore.rtd -dname "CN=UMD/CARMA, OU=Astronomy , O=University of Maryland, L=College Park, ST=Maryland, C=US" 
% keytool -certreq -alias UMDCARMA -file umd_carma.csr -keystore ./keystore.rtd

[upload umd_carma.csr to Digicert website with order]

2. Once code-signing certificate is received 
% unzip DigiCert_certs.zip 
   creating: certs/
  inflating: certs/university_of_maryland.p7b  

% keytool -import -trustcacerts -alias UMDCARMA -file certs/university_of_maryland.p7b -keystore ./keystore.rtd -keypass Carma4All -storepass RtdR00lz

Certificate reply was installed in keystore

3. Sign your jar

% jarsigner -tsa http://timestamp.digicert.com -keystore ./keystore.rtd -storepass RtdR00lz -keypass Carma4All /path/to/yourfile.jar UMDCARMA

This command does not provide any output to indicate that your code was
successfully signed.

4. To verify that the .jar file was signed successfully, run the jarsigner -verify command from the command prompt:

jarsigner -verify -verbose -certs /path/to/yourfile.jar

You should see info like this for each class in the jar:

[entry was signed on 2/26/14 12:08 PM]
X.509, CN=University of Maryland, O=University of Maryland, L=College Park, ST=Maryland, C=US
[certificate is valid from 2/19/14 7:00 PM to 2/25/16 7:00 AM]
X.509, CN=DigiCert SHA2 Assured ID Code Signing CA, OU=www.digicert.com, O=DigiCert Inc, C=US
[certificate is valid from 10/22/13 7:00 AM to 10/22/28 7:00 AM]
X.509, CN=DigiCert Assured ID Root CA, OU=www.digicert.com, O=DigiCert Inc, C=US
[certificate is valid from 11/9/06 7:00 PM to 11/9/31 7:00 PM]

...

and the last line printed should be:

jar verified.


For more info, see https://www.digicert.com/code-signing/java-code-signing-guide.htm
=======
You should see a new JAR loading. When the application launches you will be
asked to verify the new signature. If this fails, check that the parameters
used with the "keystore" program match the parameters used in the ANT build
(the parameters in the build.xml.in signjars target).


