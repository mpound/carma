# -*- Mode: perl; indent-tabs-mode: nil -*-
#
# $Id: carma.buildcf,v 1.7 2006/01/17 22:20:37 krauch Exp $ 
#
# carma.buildcf - this is the buildcf (build configuration file)
# for all UMD CARMA tinderbox builds.
#
# Run:
#
#	./build_shellscript	--buildcf ./carma.buildcf	\
#				--build tools --test  --	\
#				--tree carma
#
# to see the completed build script which has all the perl
# variables substituted.

package UserDef;

# We use the same tinderbox treedata module which is on the server
# side to translate a treename into a module and branch.

use lib '/home/build/lib';

# set the standard tinderbox search path to allow us to compile on the
# machine we run make on.

use lib '/usr/local/tinderbox/local_conf',
        '/usr/local/tinderbox/default_conf',
        '/usr/local/tinderbox/lib';


use TreeData;

# User configurable variables live in their own namespace so that they
# will not contaminate the build script.  The buildscript will get the
# values it needs via well known functions.  This package may also set
# %ENV to effect the build programs.


# given a time return a human readable string suitable for using as
# part of a CVS checkout.

sub cvs_time_str {
    my ($time) = @_;

    my ($sec,$min,$hour,$mday,$mon,$year,
	$wday,$yday,$isdst) = localtime($time);
    
    $mon++;
    $year += 1900;

    my $str = sprintf "%04d-%02d-%02d %02d:%02d", $year,$mon,$mday,$hour,$min;
    return $str;
}


# given a time return a human readable string suitable for using as
# part of a file name but similar to the CVS checkout string for the
# same time (no space, shell does not likes spaces in filenames; no
# colon tar interprets colons specially).

sub filename_time_str {
    my ($time) = @_;

    my ($sec,$min,$hour,$mday,$mon,$year,
	$wday,$yday,$isdst) = localtime($time);
    
    $mon++;
    $year += 1900;

    my $str = sprintf "%04d-%02d-%02d.%02d%02d", $year,$mon,$mday,$hour,$min;
    return $str;
}



# This is where environment variable pertinent to the build are
# defined.  In general, environment variables here will point to 
# the appropriate build directories, libraries and executables.

sub build_environment{
   my (%args) = @_;
   my ($tree_name) = $args{'tree_name'};

   return 1;
}

sub build_scripts {
    my (%args) = @_;
    my ($tree_name)  = $args{'tree_name'};    
    my ($build_type) = $args{'build_type'};
    my $build_dir    = "$ENV{HOME}/${build_type}_build";

    my $branch = $TreeData::VC_TREE{$tree_name}{'branch'};
    my $module = $TreeData::VC_TREE{$tree_name}{'module'};

    if ($branch) {
#      $cvs_checkout_flags .= " -r $branch ";
    }

    # pass these variables to the Makefile.orig so that the
    # buildid can contain this information.

    $ENV{'BUILD_CVS_D_TIME'} = $filename_time_str;
    $ENV{'BUILD_BRANCH'} = $branch;
    $ENV{'BUILD_MODULE'} = $module;


# builds describe a sequence of steps needed to perform a "build".
# Each build either succeeds or fails.  Builds can be used for running
# tests and checking source code style in addition to creating binaries.

# Builds may depend on the environment, the OS or special arguments
# passed to the program.  Arguments which are passed after the '--'
# are assumed to be build specific and are ignored by the build
# harness and can be used in defining the build sequence.

# Builds can be architecture dependent (one build name can be used for
# all architectures) or independent (each OS uses a different
# buildname) depending on your application.


# each build can have as many phases as
# are needed (sample: checkout, configure, build, test)


# Each phase must have the following entries:

#	 phase_name: which describes what the phase is.

#	 error_status: the tinderbox status which should be returned
#	 if the phase fails.

#	 dir: the directory which will be local while the script is
#	 executing.

#	 script: a list of shell commands to be executed in order
#	 until one fails (each command in a separate shell, similar to make).

    my $doTools = "/usr/local/tinderbox/local_conf/tools.sh";

    $BUILDS = {
        # Carma Tools build.
        'tools' => [
        {
            'phase_name' => "checkout",
            'error_status' => "build_failed",
            'dir' => "$ENV{HOME}",
            'script' => [ "$doTools checkout" ],
        },
        {
            'phase_name' => "pkgsync",
            'error_status' => "build_failed",
            'dir' => "$ENV{HOME}",
            'script' => [ "$doTools pkgsync" ],
        },
        {
            'phase_name' => "tools",
            'error_status' => "build_failed",
            'dir' => "$ENV{HOME}",
            'script' => [ "$doTools tools" ],
        },
        {
            'phase_name' => "configure",
            'error_status' => "build_failed",
            'dir' => "$ENV{HOME}",
            'script' => [ "$doTools configure" ],
        },
        {
            'phase_name' => "build",
            'error_status' => "build_failed",
            'dir' => "$ENV{HOME}",
            'script' => [ "$doTools build" ],
        },
        {
            'phase_name' => "test",
            'error_status' => "test_failed",
            'dir' => "$ENV{HOME}",
            'script' => [ "$doTools test" ],
        },
	{
	    'phase_name' => "docs",
	    'error_status' => "docs_failed",
            'dir' => "$ENV{HOME}",
            'script' => [ "$doTools docs" ],
	},
        ],  # end tools

        # Experimental build - disjoint from mainline.
        'experimental' => [
        {
            'phase_name' => "hello",
            'error_status' => "build_failed",
            'dir' => "$ENV{HOME}",
            'script' => [
                "echo 'Hello, virtual world!'",
            ],
        },
	],  # end experimental
    }; # end %BUILDS

  return $BUILDS;
}


# We have different error parsers defined for each 'type' of build.

sub error_parser_name {
  my (%args) = @_;

  my $parser_name =  'unix';

  return  $parser_name;
}


# Our build names on the tinderbox server (column names) are the
# hostname and OS name (and a few other details). We are running the
# same build instructions on each architecture so it makes sense to
# speak of the 'Solaris Build'.  Other users who do not worry about
# portability may use the buildscript buildname.  These users will have
# tinderbox columns with names like: "seamonkey", "grendel", "aurora"
# (these are the names of the 'type' of build).

sub build_name {
  my (%args) = @_;

  my ($argv) = "@ARGV";

  my $os = `uname -s`;
  my $osver = `uname -r`;
# my $gccver = `gcc --version | grep GCC | awk '{print \$1"-"\$3}'`; 
  my $gccver = "gcc-3.4.5";
  my $hostname = `hostname -s`;
    
  chomp $os;
  chomp $osver;
  chomp $gccver;
  chomp $hostname;

  my ($build_name) = "carma $args{'build_type'} $hostname $os-$osver $gccver";
  $build_name =~ s/\.\.+/\./g;

  return $build_name;
}


# person responsible for the build machines.

sub build_administrator {
  my (%args) = @_;

  return "rauch\@astro.umd.edu";
}


# addressing information for the build messages

sub mail_to {
  my (%args) = @_;

# return "abeard\@ovro.caltech.edu";
  return "tinderbox_builds\@dana.ovro.caltech.edu";
}


sub mail_from {
  my (%args) = @_;

  return "tinderbox-build-daemon\@eagle.astro.umd.edu";
}


# Get kernel major and minor number for tagging purposes.
# Major and minor number are returned as a string separated by an
# underscore.

sub kern_maj_min {
    my %args = @_;

    my $version = `uname -r | awk 'BEGIN { FS = "."} ; { print \$1"_"\$2 }'`;
    chomp $version;

    return $version;
}


#
# Get the day of the week
#

sub getWeekDay {
    my $val = $_[0];
    if( $val > 6 ) {
        return 0;
    }
    return (qw(Sunday Monday Tuesday Wednesday
                Thursday Friday Saturday))[$val];
}


#
# Get Time 
#

sub getTime {
    my $hr = $_[0];
    my $min = $_[1];
    my $sec = $_[2];
    if( $hr > 12 ) {
        return sprintf("%2d:%2.2d:%2.2d p.m.",$hr-12,$min,$sec);
    }
    else {
        return sprintf("%2d:%2.2d:%2.2d p.m.",$hr,$min,$sec);
    }
}


1;

