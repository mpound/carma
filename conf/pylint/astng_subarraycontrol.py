# This is a helper module for pylint
#
# See here for more information:
# http://www.logilab.org/blogentry/78354
#
# The python objects generated by OmniIDL are created at runtime. They are
# monkey-patched onto the python module/class after the instance is created.
# The pylint/ASTNG code is not capable of understanding this.
#
# In order to help the pylint/ASTNG code out, we can inform it about
# any interfaces which are used directly in observing scripts.
#
# You merely need to make sure that the interfaces in the dummy object
# below match the interfaces created by the IDL code generator.

from logilab.astng import MANAGER
from logilab.astng.builder import ASTNGBuilder

def subarraycontrol_transform(module):
    if module.name == 'subarrayControl':
        fake = ASTNGBuilder(MANAGER).string_build('''

# Dummy object which has identical interfaces to the IDL-generated
# SubarrayControl object. You only need to list functions which are
# used in observing scripts.
class DummySubarrayControl(object):
    def getScriptBool(self, index):
        return True

    def getScriptString(self, index):
        return u''

s = DummySubarrayControl()
''')
        module.locals['s'] = fake.locals['s']

# Similar to what is described above, these are local variables inside the
# subarrayCommands.py run() function. However, they leak into the execfile()
# environment used to run the script.
#
# Therefore we have to inform pylint about their existence.
def subarraycommands_transform(module):
    if module.name == 'subarrayCommands':
        fake = ASTNGBuilder(MANAGER).string_build('''
# Fake version of the environment passed into scripts
restartScript = False
scriptOptions = 'dummy string'
scriptName = 'dummy string'
''')
        for sym in ('restartScript', 'scriptOptions', 'scriptName'):
            module.locals[sym] = fake.locals[sym]

def register(linter):
    """called when loaded by pylint --load-plugins, register our tranformation
    function here
    """
    MANAGER.register_transformer(subarraycontrol_transform)
    MANAGER.register_transformer(subarraycommands_transform)
